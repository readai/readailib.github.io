<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rmarkdown on ReadAILib Official Website </title>
    <link>/categories/rmarkdown/</link>
    <description>Recent content in Rmarkdown on ReadAILib Official Website </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/rmarkdown/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CTeX样式</title>
      <link>/2017/12/15/ctex-template-for-rstudio/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/15/ctex-template-for-rstudio/</guid>
      <description>引言中文LaTeX文档并非难题。当然这句话得站在巨人 CTeX 的肩膀上才能说，它让我们只需要一句
\documentclass{ctexart} % 或者ctexrep/ctexbook或者
\usepackage{ctex}就轻松搞定中文LaTeX排版问题。跨平台通用的LaTeX编译却是个小难题，主要是没有一种跨平台通用且免费的中文字体。好吧，你们Windows用户永远有宋体黑体，你们Mac用户有华文字体，而我们苦逼Linux用户在编译LaTeX文档就没那么简单了1，是啊，我们有文泉驿，但我们要是用了文泉驿之后把文档发给你们八成不能编译，因为你们没有安装文泉驿。
字体和选项LaTeX包ctex支持若干种字体选项，如果你是ctex老用户，请注意这里我们要求的最低版本是2.2，你可能需要升级你的LaTeX包。从版本2.0开始，ctex支持根据不同操作系统自动选择中文字体，简直是为人类进步作出了巨大贡献，我们再也不必费尽口舌向用户解释“啊，你用Windows啊，那么你该使用什么字体；啊，你用Mac啊，又该如何如何”。
下面的YAML元数据应该能满足多数用户的需求，主要设置两项参数：文档类为ctexart（当然也可以是别的类），输出格式为rticles::ctex，其默认LaTeX引擎为XeLaTeX（真的，别纠结你的旧爱PDFLaTeX了）。
---documentclass: ctexartoutput: rticles::ctex---rticles::ctex的参数都是普通的pdf_document参数，参见文档rmarkdown包的文档，这里就不赘述了。
Windows和Mac用户应该都已经有自带的中文字体了。Linux用户可以另外下载 Fandol字体2，它号称是免费的，不过我们也没太搞清楚它的来头。把那些.otf字体文件下载下来保存到~/.fonts文件夹下，然后命令行切换到那里，运行fc-cache -fv。
R代码段R代码用R Markdown的语法嵌入，即三个反引号开始一段代码```{r}和三个反引号``` 结束一段代码：
options(digits = 4)fit = lm(dist ~ speed, data = cars)coef(summary(fit))## Estimate Std. Error t value Pr(&amp;gt;|t|)## (Intercept) -17.579 6.7584 -2.601 1.232e-02## speed 3.932 0.4155 9.464 1.490e-12b = coef(fit)上面回归方程中的斜率是3.9324，完整的回归方程为：\[ Y = -17.5791 + 3.9324x\]
画图当然也是木有问题的啦，想画就说嘛，不说我怎么知道你想画呢？</description>
    </item>
    
    <item>
      <title>Rmarkdown模板</title>
      <link>/2017/12/15/template-of-rmarkdown/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/15/template-of-rmarkdown/</guid>
      <description>GitHub DocumentsThis is an R Markdown format used for publishing markdown documents to GitHub. When you click the Knit button all R code chunks are run and a markdown file (.md) suitable for publishing to GitHub is generated.
Including CodeYou can include R code in the document as follows:
summary(cars)## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.</description>
    </item>
    
    <item>
      <title>Tufte样式</title>
      <link>/2017/12/15/tufte-template-for-blog/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/15/tufte-template-for-blog/</guid>
      <description>引言Tufte样式在Edward Tufte的书以及物理学家费曼的教科书很常见，它的一个显著特点就是边栏的使用。例如脚注和边栏注解，以及放在边栏里的小型插图。Tufte样式在LaTeX和HTML/CSS中都有实现1。我们将这两种实现都纳入了tufte包。若需要LaTeX/PDF输出，使用输出格式tufte_handout即可，类似地，tufte_book可以用来输出PDF书，tufte_html生成HTML网页。这些输出格式可以在YAML元数据中指定，或者传给rmarkdown::render()函数。若对rmarkdown包不熟悉，可参见 @R-rmarkdown。
---title: &amp;quot;一个Tufte样式示例&amp;quot;author: &amp;quot;张三&amp;quot;ctex: yesoutput:tufte::tufte_handout:latex_engine: xelatextufte::tufte_html: default---章节标题Tufte样式不主张太深的章节目录，一般仅仅使用一级标题（Markdown中用一个井号#）和二级标题（两个井号）。
插图边栏插图插图在Tufte的书中非常常见，我们可以使用三种插图：边栏图、全宽图、主栏图。先说边栏图：使用knitr代码段选项fig.margin = TRUE即可将图形放置在边栏中，如：
library(ggplot2)## Warning: 程辑包&amp;#39;ggplot2&amp;#39;是用R版本3.3.3 来建造的mtcars2 &amp;lt;- mtcarsmtcars2$am &amp;lt;- factor(mtcars$am, labels = c(&amp;#39;automatic&amp;#39;, &amp;#39;manual&amp;#39;))ggplot(mtcars2, aes(hp, mpg, color = am)) +geom_point() + geom_smooth() +theme(legend.position = &amp;#39;bottom&amp;#39;)## `geom_smooth()` using method = &amp;#39;loess&amp;#39;Figure 1: MPG与horsepower两个变量的散点图；颜色代表自动挡或手动挡。注意我们使用代码段选项fig.cap设定了图的标题。当然我们也可以设置图的长宽。</description>
    </item>
    
  </channel>
</rss>