<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hmm on ReadAILib Official Website </title>
    <link>/tags/hmm/</link>
    <description>Recent content in Hmm on ReadAILib Official Website </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/hmm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>隐马尔可夫模型</title>
      <link>/2017/12/23/hmm/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/23/hmm/</guid>
      <description>很早就想写一篇关于隐马尔可夫模型的文章了，这次刻意的将模型及其有关算法复习了一下，才有了这个信心去写了这篇文章。这篇文章主要参考了李航老师的《统计机器学习》 部分内容和徐亦达老师在油管上的教程1。并且这里的隐马尔可夫模型主要是指离散形式的动态模型。
隐马尔可夫模型主要是一种可用于标注问题的统计学习模型，描述由隐藏的马尔可夫链随机生成观测序列的过程，属于生成模型。近些年来主要用于语音信号处理，自然语言处理，生物信息，金融分析等领域，该教程涉及很多概率计算问题，所以希望读者能够有概率背景的情况下，阅读更佳。
本部分主要介绍一下几个部分：
HMM现象马尔可夫过程/链算法直接计算法前向-后向算法前向算法后向算法学习算法总结HMM现象玩股票的朋友都知道，图右，在市场规则下，股民只知道股票的涨停和不变这三种表面现象，而人们并不希望仅仅知道市场的涨停，而是想知道市场隐藏的信息，比如现在股票市场是熊市还是牛市，因为知道这些隐藏的信息之后，我们可以利用这些信息去长期跟进还是及时退出，以防市场大变。在这里我们称这种人们表面上能观察出来的现象为观测（observation），而那些隐藏的变量被称作状态。
有了上面比较直观的介绍以后，我们就可以定义什么是隐马尔可夫模型了。
定义10.1（隐马尔可夫模型）　隐马尔可夫模型是关于时序的概率模型，描述由一个隐藏的马尔可夫链随机生成不可观测的状态随机序列，再由各个状态生成一个观测而产生观测随机序列的过程。隐藏的马尔可夫链随机生成的状态的序列，称为状态序列（state sequence）；每个状态生成一个观测，而由此产生的观测的随机序列，称为观测序列（observation sequence）。序列的每一个位置又可以看作是一个时刻。
比如：上图的Bull-&amp;gt;Bear-&amp;gt;Event就是其中一个状态序列，而其产生的观测形成的序列up-&amp;gt;down-&amp;gt;unchange被称作观测序列，而这些序列在一定假设下，具有非常好的概率性质。
马尔可夫链上图是隐马尔可夫的概率图模型，概率图反应了事件的依赖和独立关系。
首先我们要说明q表示状态，不可观测。y表示可观测的现象。假设状态与状态之间、状态与观测现象之间均满足马尔可夫过程，其中该过程要求具备“无记忆”的性质（马尔可夫性质）：下一状态的概率分布只能由当前状态决定，在时间序列中前面的事件均与之无关。 用数学语言表示为：
\[\Pr(X_{{n+1}}=x\mid X_{1}=x_{1},X_{2}=x_{2},\ldots ,X_{n}=x_{n})=\Pr(X_{{n+1}}=x\mid X_{n}=x_{n})\]
那么根据概率图模型，我们得出了两个重要的公式：
离散状态转移概率： \[p(q_t |q_1, . . . , q_{t−1}, y_1, . . . , y_{t−1}) = p(q_t |q_{t−1})\]
离散/连续观测概率： \[p(y_t |q_1, . . . , q_{t−1}, y_1, . . . , y_{t−1}) = p(y_t |q_t )\]</description>
    </item>
    
  </channel>
</rss>